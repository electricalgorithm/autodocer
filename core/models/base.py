"""
This module defines the interface for the models. Interfaces
are used to define the methods that a class must implement.

author: @electricalgorithm
"""
from abc import ABCMeta, abstractmethod
from dataclasses import dataclass, asdict

from core.utils import get_logger
from core.datatypes import DocsLanguage, CodeLanguage
from core.utils import OllamaAdaptor, OllamaRequest, OllamaResponse


@dataclass
class ModelResponse:
    """
    This class represents the response from the model. It contains
    the name of the model that generated the response, the language
    of the code, the code that is inputted, the language of the
    documentation, and the file that is generated by the model.
    """

    model_name: str
    """The name of the model that generated the response."""
    code_language: CodeLanguage
    """The language of the code."""
    code: str
    """The code that is inputted."""
    docs_language: DocsLanguage
    """The language of the documentation."""
    generated_file: str
    """The file that is generated by the model."""


class ModelBase(metaclass=ABCMeta):
    """
    This base class defines the methods that a model must implement. The function
    prompt returns the prompt for the model, and the function generate generates
    """
    PLACEHOLDER_CODE: str = "[__code__]"
    PLACEHOLDER_CODELANG: str = "[__codelang__]"
    PLACEHOLDER_DOCSLANG: str = "[__docslang__]"
    DEFAULT_HOST: str = "localhost"
    DEFAULT_PORT: int = 11434
    PROMPTS_DIR: str = "prompts"

    def __init__(self, server_host: str, server_port: int) -> None:
        """The constructor for the model.
        :param server_host: The host of the ollama server.
        :param server_port: The port of the ollama server.
        """
        self._ollama: OllamaAdaptor = OllamaAdaptor(server_host,
                                                    server_port)
        self._logger = get_logger(__name__, "DEBUG")

    @property
    @abstractmethod
    def model_name(self) -> str:
        """Returns the name of the model. It is used
        to identify the model in the server.
        :return: The name of the model.
        """
        raise NotImplementedError

    @property
    @abstractmethod
    def allowed_code_languages(self) -> list[DocsLanguage]:
        """Returns the list of allowed code languages for the model.
        The get_prompt method must control the languages that are allowed.
        :return: The list of allowed code languages for the model.
        """
        raise NotImplementedError

    @property
    @abstractmethod
    def allowed_docs_languages(self) -> list[DocsLanguage]:
        """Returns the list of allowed documentation languages for the model.
        The get_prompt method must control the languages that are allowed.
        :return: The list of allowed documentation languages for the model.
        """
        raise NotImplementedError

    @property
    @abstractmethod
    def prompt_file(self) -> str:
        """Returns the name of the prompt file for the model.
        :return: The name of the prompt file for the model.
        """
        raise NotImplementedError

    def _get_prompt(self) -> str:
        """Returns the prompt for the model.
        :return: The prompt for the model with placeholders for the code
        and the documentation. The placeholders are [__code__], [__codelang__],
        [__docslang__].
        """
        file_path: str = f"core/{self.PROMPTS_DIR}/{self.prompt_file}"
        # Read the prompt from the file.
        with open(file_path, "r", encoding="utf-8") as file:
            prompt: str = file.read()
        self._logger.debug(f"Default prompt for the model {self.model_name}:\n\t{prompt}")
        return prompt

    def generate_response(self,
                          code_language: CodeLanguage,
                          docs_language: DocsLanguage,
                          code: str,
                          ) -> ModelResponse:
        """Generates the response from the model.
        :param code_language: The language of the code. Must be one of the
        languages in the CodeLanguage enum.
        :param docs_language: The language of the documentation. Must be one of
        the languages in the DocsLanguage enum.
        :param code: The code for which the documentation is generated.
        :return: The response from the model.
        """
        # Check if the code language is allowed.
        if code_language not in self.allowed_code_languages:
            self._logger.error(f"The code language {code_language.value} "
                               f"is not allowed for the model {self.model_name}.")
            raise ValueError(f"The code language {code_language.value} "
                             f"is not allowed for the model {self.model_name}.")
        # Check if the documentation language is allowed.
        if docs_language not in self.allowed_docs_languages:
            self._logger.error(f"The documentation language {docs_language.value} "
                               f"is not allowed for the model {self.model_name}.")
            raise ValueError(f"The documentation language {docs_language.value} "
                             f"is not allowed for the model {self.model_name}.")

        # Construct the prompt for the model.
        prompt = self._get_prompt()
        prompt = prompt.replace(self.PLACEHOLDER_CODE, code)
        prompt = prompt.replace(self.PLACEHOLDER_CODELANG, code_language.value)
        prompt = prompt.replace(self.PLACEHOLDER_DOCSLANG, docs_language.value)
        self._logger.debug(f"Generated prompt for the model {self.model_name}:\n\t{prompt}")

        # Send the request to the ollama server.
        result: OllamaResponse = self._ollama.send_request(
            OllamaRequest(model=self.model_name, prompt=prompt)
        )
        self._logger.debug(f"Generated response for the model "
                           f"{self.model_name}:\n\t{asdict(result)}")

        # Trim the response.
        result.response = result.response.replace("```", "")

        # Return the response from the model.
        return ModelResponse(model_name=self.model_name,
                            code_language=code_language,
                            code=code,
                            docs_language=docs_language,
                            generated_file=result.response)
